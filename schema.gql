# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Add new user with role"""
input AddUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
}

type Author {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: UserRole
  posts: [Post!]!
}

type Category {
  id: ID!
  name: String!
}

input CategoryInput {
  name: String!
}

"""The Date model"""
type DateBase {
  id: ID!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  addUser(addUserInput: AddUserInput!): User!
  signup(regInput: UserRegInput!): User!
  login(loginInput: UserLoginInput!): User!
  addCategory(categoryInput: CategoryInput!): Category
  updateCategory(categoryInput: CategoryInput!): Category
  addRecipe(newRecipeData: NewRecipeInput!): Recipe!
  removeRecipe(id: String!): Boolean!
}

input NewRecipeInput {
  title: String!
  description: String
  ingredients: [String!]!
}

type Post {
  id: ID!
}

"""Product data"""
type Product {
  id: ID!
  name: String!
  description: String!
  image: String!
  barCode: String!
  costPrice: Float!
  sellPrice: Float!
  inStock: Float!
  outStock: Float!
  sellsMeasurement: String!
  visibleOnShelve: String!
}

"""Product input data"""
input ProductInput {
  email: String!
  password: String!
}

type Query {
  me: User
  users: [User!]!
  user(id: ID!): User!
  categories: [Category!]
  category(id: ID!, name: String!): Category
  recip: String!
  recipe(id: String!): Recipe!
  recipes(skip: Int = 0, take: Int = 25): [Recipe!]!
}

type Recipe {
  id: ID!
  title: String!
  description: String
  creationDate: DateTime!
  ingredients: [String!]!
}

type Subscription {
  recipeAdded: Recipe!
}

"""The user model"""
type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: UserRole
}

"""The user model"""
type UserBase {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: UserRole
}

"""New user data"""
input UserLoginInput {
  email: String!
  password: String!
}

"""New user data"""
input UserRegInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

"""The definition of an enumerated User Role"""
enum UserRole {
  ADMIN
  EDITOR
  MODERATOR
}
